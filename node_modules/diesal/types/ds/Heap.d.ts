/**
 * A Heap is a data structure that satisfies the *heap property*: if A is
 * a parent node of B, then the value of node A is ordered with respect to the
 * value of B, with the same ordering applying across all nodes. Heaps are an
 * implementation of a Priority Queue, providing fast (O(1)) access to the min,
 * and reasonable (O(logn) or better, depending on variant) performance for
 * insert and delete.
 *
 * This particular implementation is of a binary heap, where each node has 0-2
 * children.
 *
 * For more information:
 *
 * [Heaps][Heap]
 *
 * [Binary Heaps][BinHeap]
 *
 * Note that in all descriptions, where we use "min", it really depends on what
 * your comparison function is. The default is a min function.
 *
 * [Heap]: https://en.wikipedia.org/wiki/Heap_(data_structure)
 * [BinHeap]: https://en.wikipedia.org/wiki/Binary_heap
 */
export declare class Heap<T> {
    private cmp;
    private heap;
    constructor(list?: T[], cmp?: (a: T, b: T) => boolean);
    /**
     * The number of elements in the heap
     *
     * @type {number}
     */
    get size(): number;
    /**
     * Insert a new element into the heap, maintaining the heap property.
     */
    push(value: T): number;
    /**
     * Gets the min value and removes it from the heap, adjusting everything else
     * in the heap to maintain heap property, then returns the value.
     */
    pop(): T | null;
    /**
     * Checks if the value is inside the collection
     */
    contains(value: T): boolean;
    /**
     * Iteratively goes through tree, ensuring heap property is maintained,
     * correcting it if not.
     */
    private heapify;
    /**
     * Swaps two indexes in the heap.
     */
    private swap;
    /**
     * Gets the min value of the heap (if your cmp function is a less-than
     * comparison).
     */
    findMin(): T | undefined;
    /**
     * Gets the max value of the heap (if your cmp function is a greater-than
     * comparison). (Functionally, identical to findMin -- included for semantic
     * reasons based on comparison function)
     */
    findMax(): T | undefined;
}
