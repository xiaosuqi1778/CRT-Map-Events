"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BinaryTree = /** @class */ (function () {
    function BinaryTree(value) {
        this.value = value;
    }
    Object.defineProperty(BinaryTree.prototype, "size", {
        get: function () {
            var size = 1;
            if (this.left)
                size += this.left.size;
            if (this.right)
                size += this.right.size;
            return size;
        },
        enumerable: true,
        configurable: true
    });
    BinaryTree.prototype.withParent = function (parent) {
        this.parent = parent;
        return this;
    };
    BinaryTree.prototype.withoutParent = function () {
        this.parent = undefined;
        return this;
    };
    BinaryTree.prototype.setLeft = function (subtree) {
        this.left = subtree.withParent(this);
    };
    BinaryTree.prototype.setRight = function (subtree) {
        this.right = subtree.withParent(this);
    };
    Object.defineProperty(BinaryTree.prototype, "isLeftChild", {
        get: function () {
            return !!this.parent && this.parent.left === this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BinaryTree.prototype, "isRightChild", {
        get: function () {
            return !!this.parent && this.parent.right === this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BinaryTree.prototype, "leftmostDescendant", {
        get: function () {
            return this.left ? this.left.leftmostDescendant : this;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BinaryTree.prototype, "rightmostDescendant", {
        get: function () {
            return this.right ? this.right.rightmostDescendant : this;
        },
        enumerable: true,
        configurable: true
    });
    BinaryTree.prototype.prettyPrintValue = function () {
        return "" + this.value;
    };
    BinaryTree.prototype.prettyPrint = function (indent) {
        if (indent === void 0) { indent = ''; }
        var str = "" + indent.substr(0, indent.length - 1) + (this.parent ? (this.isRightChild ? '├' : '└') : '') + "\u2500\u252C\u2500 " + this.prettyPrintValue() + "\n";
        if (this.right) {
            str += this.right.prettyPrint(indent + ' │');
        }
        else {
            str += indent + " \u251C\u2500\u2500\u2500 \u00D7\n";
        }
        if (this.left) {
            str += this.left.prettyPrint(indent + '  ');
        }
        else {
            str += indent + " \u2514\u2500\u2500\u2500 \u00D7\n";
        }
        return str;
    };
    BinaryTree.prototype.toString = function () {
        return this.prettyPrint();
    };
    return BinaryTree;
}());
exports.BinaryTree = BinaryTree;
